syntax = "proto3";

// **************************************************************
//
// Apollo PDU Descriptions.
//
// **************************************************************

message ApolloPdu {
    Version version = 1;
    uint32 transaction_id = 2;
    oneof procedure {
	Error error = 3;
	Response response = 4;
	CreateTable create_table = 5;
	DeleteTable delete_table = 6;
	OpenTable open_table = 7;
	CloseTable close_table = 8;
	TableInfo table_info = 9;
	Read read = 10;
	Write write = 11;
	Update update = 12;
	Delete delete = 13;
	ReadRange read_range = 14;
	ReadRangeN read_range_n = 15;
	BatchWrite batch_write = 16;
	First first = 17;
	Last last = 18;
	Seek seek = 19;
	Next next = 20;
	Prev prev = 21;
	AddIndex add_index = 22;
	RemoveIndex remove_index = 23;
	IndexRead index_read = 24;
	ListTables list_tables = 25;
    }
}

// **************************************************************
//
// Apollo Procedure Definitions.
//
// **************************************************************
message BatchWrite {
    string table_name = 1;
    repeated Field delete_keys = 2;
    repeated KeyColumnsPair write_kvps = 3;
}

message CloseTable {
    string table_name = 1;
}

message CreateTable {
    string table_name = 1;
    repeated string keys = 2;
    repeated TableOption table_options = 3;
}

message Delete {
    string table_name = 1;
    repeated Field key = 2;
}

message DeleteTable {
    string table_name = 1;
}

message Error {
    oneof cause {
	string transport = 1;
	string protocol = 2;
	string system = 3;
	string misc = 4;
    }
}

message OpenTable {
    string table_name = 1;
}

message Read {
    string table_name = 1;
    repeated Field key = 2;
}

message ReadRange {
    string table_name = 1;
    repeated Field start_key = 2;
    repeated Field end_key = 3;
    uint32 limit	= 4;
}

message ReadRangeN  {
    string table_name = 1;
    repeated Field start_key = 2;
    uint32 n = 3;
}

message Response {
    oneof result {
	string ok = 1;
	Fields columns = 2;
	KeyColumnsPair key_columns_pair	= 3;
	KeyColumnsList	key_columns_list = 4;
	Fields proplist = 5;
	KcpIt kcp_it = 6;
	Postings postings = 7;
	FieldNames string_list = 8;
    }
    bool more_data_to_be_sent = 9;
}

message TableInfo {
    string table_name = 1;
    repeated string attributes = 2;
}

message Update {
    string table_name = 1;
    repeated Field key = 2;
    repeated UpdateOperation update_operation = 3;
}

message Write {
    string table_name = 1;
    repeated Field key = 2;
    repeated Field columns = 3;
}

message First {
    string table_name  = 1;
}

message Last {
    string table_name = 1;
}

message Seek {
    string table_name = 1;
    repeated Field key = 2;
}

message Next {
    bytes it =1;
}

message Prev {
    bytes it = 1;
}

message AddIndex {
    string table_name  = 1;
    repeated IndexConfig config  = 2;
}

message RemoveIndex {
    string table_name  = 1;
    repeated string columns  = 2;
}

message IndexRead {
    string table_name	= 1;
    string column_name	= 2;
    string term		= 3;
    PostingFilter filter = 4;
}

message ListTables {
}

// **************************************************************
//
// Common IE Definitions.
//
// **************************************************************
enum CharFilter {
    NFC = 0;
    NFD = 1;
    NFKC = 2;
    NFKD = 3;
}

enum Comparator {
    DESCENDING = 0;
    ASCENDING = 1;
}

message Continuation {
    bool complete = 1;
    repeated Field key	= 2;
}

enum DataModel	{
    KV = 0;
    ARRAY = 1;
    MAP = 2;
}

message Field {
    string name	= 1;
    oneof value {
	bool boolean = 2;
	int64 int = 3;
	bytes binary = 4;
	bytes null = 5;
	double double = 6;
	string string = 7;
    }
}

message FieldNames {
    repeated string field_names = 1;
}

message Fields {
    repeated Field fields = 1;
}

enum HashingMethod {
    VIRTUALNODES = 0;
    CONSISTENT = 1;
    UNIFORM = 2;
    RENDEZVOUS = 3;
}

message IndexConfig {
    string column = 1;
    IndexOptions options = 2;
}

message IndexOptions {
    CharFilter char_filter = 1;
    Tokenizer tokenizer = 2;
    TokenFilter token_filter = 3;
}

message KeyColumnsPair {
    repeated Field key = 1;
    repeated Field columns = 2;
}

message KeyColumnsList {
    repeated KeyColumnsPair list = 1;
    Continuation continuation = 2;
}

message Posting {
    repeated Field key = 1;
    uint32 timestamp = 2;
    uint32 frequency = 3;
    uint32 position = 4;
}

message Postings {
    repeated Posting list = 1;
}

message PostingFilter {
    SortBy sort_by = 1;
    // empty bytes denote nil. proto3 defaults to 0 for numeric values
    // thus, we use bytes to distinguish if 0 is explictly set.
    bytes start_ts = 2; // encoded big endian uint32
    bytes end_ts = 3; // encoded big endian uint32
    uint32 max_postings = 4;
}

message KcpIt {
    KeyColumnsPair  key_columns_pair = 1;
    bytes it = 2;
}

enum SortBy {
    RELEVANCE = 0;
    TIMESTAMP = 1;
}

message TableOption {
    oneof opt {
	Type type = 1;
	DataModel data_model = 2;
	Wrapper	wrapper = 3;
	Wrapper	mem_wrapper = 4;
	Tda tda = 5;
	Comparator comparator = 6;
	bool time_series = 7;
	uint32 num_of_shards = 8;
	bool distributed = 9;
	uint32 replication_factor = 10;
	FieldNames hash_exlude = 11;
	HashingMethod hashing_method = 12;
	uint32 ttl = 13;
    }
}

message Tda {
    uint32 num_of_buckets = 1;
    oneof time_margin {
	uint32 seconds = 2;
	uint32 minutes = 3;
	uint32 hours = 4;
    }
    string ts_field = 5;
    TimeUnit precision = 6;
}

enum TimeUnit {
    SECOND = 0;
    MILLISECOND = 1;
    MICROSECOND = 2;
    NANOSECOND = 3;
}

message TokenFilter {
    TokenTransform transform = 1;
    repeated string add = 2;
    repeated string delete = 3;
    TokenStats stats = 4;
}

enum Tokenizer {
    UNICODE_WORD_BOUNDARIES = 0;
}

enum TokenStats {
    NOSTATS = 0;
    UNIQUE = 1;
    FREQUENCY = 2;
    POSITION = 3;
}

enum TokenTransform {
    LOWERCASE = 0;
    UPPERCASE = 1;
    CASEFOLD = 2;
}

enum Type {
    LEVELDB = 0;
    MEMLEVELDB = 1;
    LEVELDBWRAPPED = 2;
    MEMLEVELDBWRAPPED = 3;
    LEVELDBTDA = 4;
    MEMLEVELDBTDA = 5;
    ROCKSDB = 6;
}

message UpdateInstruction {
    enum Instruction {
	INCREMENT = 0;
	OVERWRITE = 7;
    }
    Instruction instruction = 8;
    // empty bytes denote nil. proto3 defaults to 0 for numeric values
    // thus, we use bytes to distinguish if 0 is explictly set.
    bytes threshold = 14; // encoded big endian uint32
    bytes set_value = 15; // encoded big endian uint32
}

message UpdateOperation {
    string field = 1;
    UpdateInstruction update_instruction = 2;
    Value value = 3;
    Value default_value  = 4;
}

message Value {
    oneof value {
	bool boolean = 1;
	int64 int = 2;
	bytes binary = 3;
	bytes null = 4;
	double double = 5;
	string string = 6;
    }
}

message Version {
    uint32 major = 1;
    uint32 minor = 2;
}

message Wrapper {
    uint32 num_of_buckets = 1;
    oneof time_margin {
	uint32 seconds = 2;
	uint32 minutes = 3;
	uint32 hours = 4;
    }
    oneof size_margin {
	uint32 megabytes = 5;
	uint32 gigabytes = 6;
    }
}
